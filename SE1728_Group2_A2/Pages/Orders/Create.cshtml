@page
@model SE1728_Group2_A2.Pages.Orders.CreateModel
@using SE1728_Group2_A2.Utils.ModelHelper

@{
    ViewData["Title"] = "Create";
}

<h4>Create New Order</h4>
<hr />
<div class="row">
    <div class="col-md-12">
        <form method="post">
            <div class="row">
                <label class="control-label bold-label">Product</label>
                <div class="form-group col-md-9">
                    <input class="form-control" id="txtProductId" type="text" value="" />
                </div>
                <div class="form-group col-md-3">
                    <button id="btnFind" class="form-control btn btn-outline-primary bold-label" type="button" onclick="findProduct()">Find</button>
                </div>
            </div>
            <div class="row">
                <div class="form-group col-md-3">
                    <label class="control-label bold-label">Product Name</label>
                    <input class="form-control" id="txtProductName" type="text" value="###" readonly />
                </div>
                <div class="form-group col-md-3">
                    <label class="control-label bold-label">Price</label>
                    <input class="form-control" id="txtPrice" type="text" value="0" readonly />
                </div>
                <div class="form-group col-md-3">
                    <label class="control-label bold-label">Quantity</label>
                    <div class="input-group">
                        <span class="input-group-btn" style="margin-right: 15px">
                            <button id="btnDecrease" class="btn btn-warning squareBtn" type="button" onclick="decreaseQuantity()" disabled>-</button>
                        </span>
                        <input class="form-control" style="text-align: center;" id="txtQuantity" type="text" value="0" readonly />
                        <span class="input-group-btn" style="margin-left: 15px">
                            <button id="btnIncrease" class="btn btn-primary squareBtn" type="button" onclick="increaseQuantity()" disabled>+</button>
                        </span>
                    </div>
                </div>
                <div class="form-group col-md-3">
                    <label class="control-label bold-label">Total Price</label>
                    <input class="form-control" id="txtTotalPrice" type="text" value="0" readonly />
                </div>
            </div>
            <div class="form-group mt-2">
                <button id="btnAdd" type="button" value="Add To List" class="form-control btn btn-outline-primary bold-label" onclick="addProductToList()" disabled>Add Product To List</button>
            </div>
        </form>
    </div>
</div>

<hr />
<div class="row">
    <div class="col-md-12">
        <table class="table table-hover">
            <thead>
                <tr>
                    <th>No</th>
                    <th>Product ID</th>
                    <th>Product Name</th>
                    <th>Unit Price</th>
                    <th>Quantity</th>
                    <th>Total Price</th>
                    <th>Action</th>
                </tr>
            </thead>
            <tbody id="orderTableBody">
                <!-- Order details will be display here -->
            </tbody>
        </table>
    </div>
</div>
<h5 id="txtTotalOrder">Total: 0 VND</h5>

<hr class="mt-5" />
<div class="row">
    <div class="col-md-3">
        <form method="post" id="orderForm">
            <input type="hidden" id="orderDetailsInput" name="OrderDetailsJson" />
            <button id="btnCreate" class="form-control btn btn-success" style="font-weight: bold;" type="submit" disabled>Create Order</button>
        </form>
    </div>
    <div class="col-md-6">
    </div>
    <div class="col-md-3">
        <a asp-page="Index" class="form-control btn btn-danger">Cancel</a>
    </div>
</div>

<style>
    .squareBtn {
        width: 40px;
        font-weight: bold
    }

    .not-exist {
        font-style: italic;
        color: red;
    }

    .bold-label {
        font-weight: bold;
    }
</style>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }

    <script>
        let totalOrder = 0;
        function findProduct() {
            const productId = document.getElementById("txtProductId").value;
            var products = JSON.parse('@Html.Raw(ViewData["Products"])');

            var foundProduct = products.find(function (product) {
                return product.ProductId == productId;
            });

            if (foundProduct) {
                var productNameElement = document.getElementById("txtProductName");
                productNameElement.value = foundProduct.ProductName;
                productNameElement.classList.remove("not-exist");
                document.getElementById("txtPrice").value = foundProduct.UnitPrice;
                document.getElementById("txtQuantity").value = "1";
                document.getElementById("txtTotalPrice").value = foundProduct.UnitPrice;
                turnButton(1);
            } else {
                resetVal();
                turnButton(0);
            }
        }

        // increase quantity button click
        function increaseQuantity() {
            const productId = document.getElementById("txtProductId").value;
            var products = JSON.parse('@Html.Raw(ViewData["Products"])');

            var foundProduct = products.find(function (product) {
                return product.ProductId == productId;
            });

            const currentQuantity = document.getElementById("txtQuantity").value;
            var newQuantity = Number(currentQuantity) + 1;
            document.getElementById("txtQuantity").value = newQuantity;
            document.getElementById("txtTotalPrice").value = foundProduct.UnitPrice * newQuantity;
            document.getElementById("btnDecrease").disabled = false;
        }

        // increase quantity button click
        function decreaseQuantity() {
            const productId = document.getElementById("txtProductId").value;
            var products = JSON.parse('@Html.Raw(ViewData["Products"])');

            var foundProduct = products.find(function (product) {
                return product.ProductId == productId;
            });

            const currentQuantity = document.getElementById("txtQuantity").value;
            var newQuantity = Number(currentQuantity) - 1;
            document.getElementById("txtQuantity").value = newQuantity;
            document.getElementById("txtTotalPrice").value = foundProduct.UnitPrice * newQuantity;

            if (newQuantity === 1) {
                document.getElementById("btnDecrease").disabled = true;
            }
        }

        // add product to order details list
        let orderDetails = [];
        function addProductToList() {
            var txtProductId = document.getElementById("txtProductId").value;
            var txtQuantity = parseInt(document.getElementById("txtQuantity").value, 10);
            var products = JSON.parse('@Html.Raw(ViewData["Products"])');
            var foundProduct = products.find(function (product) {
                return product.ProductId == txtProductId;
            });
            let existingProduct = orderDetails.find(item => item.productId === txtProductId);

            if (existingProduct) {
                var newQuantity = existingProduct.quantity + txtQuantity;
                existingProduct.quantity = newQuantity;
                existingProduct.totalPrice = newQuantity * foundProduct.UnitPrice;
            } else {
                let orderDetail = {
                    productId: txtProductId,
                    productName: foundProduct.ProductName,
                    unitPrice: foundProduct.UnitPrice,
                    quantity: txtQuantity,
                    totalPrice: txtQuantity * foundProduct.UnitPrice
                };
                orderDetails.push(orderDetail);
            }
            document.getElementById('orderForm').addEventListener('submit', function () {
                document.getElementById('orderDetailsInput').value = JSON.stringify(orderDetails);
            });
            console.log(orderDetails);
            displayOrderDetails();
            resetValAfterAddToList()

        }

        function displayOrderDetails() {
            let orderTableBody = document.getElementById("orderTableBody");
            orderTableBody.innerHTML = "";
            totalOrder = 0;
            orderDetails.forEach((orderDetail, index) => {
                let totalPrice = orderDetail.unitPrice * orderDetail.quantity;
                totalOrder += totalPrice;
                let row = document.createElement("tr");
                row.innerHTML = `
                            <td>${index + 1}</td>
                            <td>${orderDetail.productId}</td>
                            <td>${orderDetail.productName}</td>
                            <td>${getFormatedCurrency(orderDetail.unitPrice)}</td>
                            <td>${orderDetail.quantity}</td>
                            <td>${getFormatedCurrency(totalPrice)}</td>
                            <td><button class="btn btn-outline-danger" onclick="removeProduct(${index})">X</button></td>
                        `;
                orderTableBody.appendChild(row);
            });
            document.getElementById("txtTotalOrder").innerText = "Total: " + getFormatedCurrency(totalOrder);
        }

        function removeProduct(index) {
            orderDetails.splice(index, 1);
            if (orderDetails.length < 1) {
                document.getElementById("btnCreate").disabled = true;
            }
            displayOrderDetails();
        }

        function resetVal() {
            var productNameElement = document.getElementById("txtProductName");
            productNameElement.value = "This product does not exist";
            productNameElement.classList.add("not-exist");
            document.getElementById("txtPrice").value = "0";
            document.getElementById("txtQuantity").value = "0";
            document.getElementById("txtTotalPrice").value = "0";
        }

        function resetValAfterAddToList() {
            var productNameElement = document.getElementById("txtProductName");
            productNameElement.value = "###";
            productNameElement.classList.remove("not-exist");
            document.getElementById("txtPrice").value = "0";
            document.getElementById("txtProductId").value = "";
            document.getElementById("txtQuantity").value = "0";
            document.getElementById("txtTotalPrice").value = "0";
            document.getElementById("btnCreate").disabled = false;
            turnButton(0);
        }

        function turnButton(mode) {
            if (mode === 1) {
                document.getElementById("btnIncrease").disabled = false;
                document.getElementById("btnAdd").disabled = false;
            } else {
                document.getElementById("btnDecrease").disabled = true;
                document.getElementById("btnIncrease").disabled = true;
                document.getElementById("btnAdd").disabled = true;
            }
        }

        function getFormatedCurrency(amount) {
            const currencyUnit = "VND";
            const parts = String(amount).split(".");
            let formattedIntegerPart = "";
            let count = 0;

            for (let i = parts[0].length - 1; i >= 0; i--) {
                formattedIntegerPart = parts[0][i] + formattedIntegerPart;
                count++;

                if (count % 3 === 0 && i > 0) {
                    formattedIntegerPart = "," + formattedIntegerPart;
                }
            }

            if (parts.length === 1) {
                return formattedIntegerPart + " " + currencyUnit;
            } else {
                return formattedIntegerPart + "." + parts[1] + " " + currencyUnit;
            }
        }



    </script>
}
